/*
AlphanumericCodeGenerator.ts
Description: This random code generator generates a random alphanumeric code of variable length.
Use Cases: generating random authentication codes
*/

import IRandomCodeGenerator from "./IRandomCodeGenerator";
import crypto from "crypto";
import bcrypt from "bcrypt";

export default class AlphanumericCodeGenerator implements IRandomCodeGenerator {

    /** Array that maps an integer between 0 and 35 to the appropriate character */
    private static _characters: string[] = [
        '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P',
        'Q','R','S','T','U','V','W','X','Y','Z'
    ];
    /**
     * @param numChars length of the code generated 
     * @returns the randomly generated alphanumeric code with length `numChars`
     */
    public async generate(numChars: number = 10): Promise<string> {
        const code: string[] = await new Promise((resolve, reject) => {
            try {
                const code: string[] = [];
                for (let i = 0; i < numChars; i++) {
                    code.push(AlphanumericCodeGenerator._characters[crypto.randomInt(0, 35)]);
                }
                resolve(code);
            } catch (err) {
                reject(err);
            }
        });
        if (code instanceof Error) throw code;
        return code.join("");
    }
    /**
     * @param decryptedCode the code generated by the `generate` method
     * @returns the encrypted code
     */
    public async asEncrypted(decryptedCode: string): Promise<string> {
        try {
            // casing should not matter for the code
            return await bcrypt.hash(decryptedCode.toLowerCase(), 12);
        } catch (err) {
            throw err;
        }
    }
    /**
     * @param encryptedCode an encrypted version of a code generated by `generate()`
     * @param decryptedCode the actual code generated by `generate()`
     * @returns true if the `decryptedCode` matches the `encryptedCode` and false if it does not
     */
    public async compare(encryptedCode: string, decryptedCode: string) {
        try {
            // casing should not matter for the code
            return await bcrypt.compare(decryptedCode.toLowerCase(), encryptedCode);
        } catch (err) {
            throw err;
        }
    }
}